# -*- coding: utf-8 -*- 
from Products.Five.browser import BrowserView
from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
from plone import api
import datetime
from DateTime import DateTime
import logging
import json
from MarieClaire.content import DBSTR
from sqlalchemy import create_engine
from cStringIO import StringIO
import csv
from plone.protect.interfaces import IDisableCSRFProtection
from zope.interface import alsoProvides
import requests
from requests.auth import HTTPBasicAuth
import copy
import time as TIME

logger = logging.getLogger('MarieClaire.content')
LIMIT=20
ENGINE = create_engine(DBSTR, echo=True)


class UpdateCustom(BrowserView):

    def __call__(self):
        context = self.context
        request = self.request
        portal = api.portal.get()
        alsoProvides(request, IDisableCSRFProtection)

        if api.user.is_anonymous():
            request.response.redirect(portal.absolute_url())
            return

        if 'form.widgets.ownerList' in request.form:
            context.ownerList = request.form['form.widgets.ownerList']
        if 'form.widgets.postList' in request.form:
            context.postList = request.form['form.widgets.postList']
        if 'form.widgets.tableList' in request.form:
            context.tableList = request.form['form.widgets.tableList']
        request.response.redirect('%s/custom' % portal.absolute_url())
        requests.get('http://localhost:8080/MarieClaire/@@update_ga_table_data', auth=HTTPBasicAuth('updater', 'w3K0Bd'))
        return


class ManaBasic(BrowserView):

    def execSql(self, execStr):
        try:
            conn = ENGINE.connect() # DB連線
            execResult = conn.execute(execStr)
        except:
            TIME.sleep(1)
            logger.info('Connect MySQL error, Retry.')
            conn = ENGINE.connect() # DB連線
            execResult = conn.execute(execStr)
        conn.close()
        if execResult.returns_rows:
            return execResult.fetchall()

    def isAnonymous(self):
        portal = api.portal.get()
        if api.user.is_anonymous():
            self.request.response.redirect('%s/login' % portal.absolute_url())
        return api.user.is_anonymous()


class UpdateExtraEdit(ManaBasic):

    def __call__(self):
        order_id = self.request.get('order')
        val = self.request.get('val')
        execStr = """SELECT * FROM extra_edit WHERE order_id = '{}'""".format(order_id)
        result = self.execSql(execStr)
        if result == []:
            execStr = """INSERT INTO extra_edit(order_id, value) VALUES('{}','{}')
                """.format(order_id, val)
            self.execSql(execStr)
        else:
            execStr = """UPDATE extra_edit SET value = '{}' WHERE order_id = '{}'
                """.format(val, order_id)
            self.execSql(execStr)


class UpdateWeight(ManaBasic):

    def __call__(self):
        if self.isAnonymous():
            return
        
        request = self.request
        update_type = request.form.get('update_type')
        update_id = request.form.get('update_id')
        weight_name = request.form.get('weight_name')
        weight = request.form.get('weight')

        if update_type == 'order':
            execStr = """\
                UPDATE dfp_ad_server
                SET {} = {} WHERE ORDER_ID = '{}' AND status != 'disabled'""".format(weight_name, weight, update_id)
        else:
            execStr = """UPDATE dfp_ad_server SET {} = {} 
                WHERE LINE_ITEM_ID = '{}' AND status != 'disabled'""".format(weight_name, weight, update_id)
        self.execSql(execStr)
        return weight

class UpdateEst(ManaBasic):
    def __call__(self):
        update_id = self.request.form.get('update_id')
        est_name = self.request.form.get('est_name')
        value = self.request.form.get('value')
        update_type = self.request.form.get('update_type')

        if update_type == 'Est_weight':
            execStr = """UPDATE dfp_line_item SET {} = {} WHERE ORDER_ID = '{}'
                """.format(est_name, value, update_id)
        else:
            execStr = """UPDATE dfp_line_item SET {} = {} WHERE 
                LINE_ITEM_ID = '{}' """.format(est_name, value, update_id)

        self.execSql(execStr)
        return value


class UpdateDateData(ManaBasic):
    def __call__(self):
        update_name = self.request.form.get('update_name')
        line_item_id = self.request.form.get('line_item_id')
        value = self.request.form.get('value')
        date = self.request.form.get('date')
        execStr = """UPDATE dfp_ad_server SET {} = {} WHERE LINE_ITEM_ID = '{}' AND 
        date = '{}' """.format(update_name, value, line_item_id, date)
        self.execSql(execStr)
        return value


class UpdateStatus(ManaBasic):
    def __call__(self):
        date = self.request.get('date')
        line_item_id = self.request.get('line_item_id')
        execStr = """UPDATE dfp_ad_server SET status = 'disabled' WHERE date ='{}' AND 
            LINE_ITEM_ID = '{}'""".format(date, line_item_id)
        self.execSql(execStr)


class ManaCustomList(ManaBasic):
    template = ViewPageTemplateFile('template/mana_custom_list.pt')
    def getCustomList(self):
        current = api.user.get_current().getUserName()
        brains = api.content.find(Type='Custom', sort_on='created', sort_order='reverse')
        result = []
        for brain in brains:
            item = brain.getObject()
            item_ownerList = item.ownerList
            if item_ownerList != None:
                ownerList = item_ownerList.split('\n')
                appended = False
                if 'ALL' in ownerList:
                    result.append({
                        'title': item.title,
                        'url':brain.getURL()
                    })
                    appended = True
                elif 'AE' in ownerList:
                    if 'Reader' in api.user.get_roles():
                        result.append({
                            'title': item.title,
                            'url':brain.getURL()
                        })
                        appended = True
                elif 'PLANNER' in ownerList:
                    if 'Editor' in api.user.get_roles():
                        result.append({
                            'title': item.title,
                            'url':brain.getURL()
                        })
                        appended = True
#                import pdb; pdb.set_trace()
                if not appended:
                    for owner in ownerList:
                        if current == owner.strip():
                            result.append({
                                'title': item.title,
                                'url':brain.getURL()
                            })
        return result

    def __call__(self):
        if self.isAnonymous():
            return
        return self.template()


class CustomReport(ManaBasic):
    template = ViewPageTemplateFile('template/custom_report.pt')
    def checkUser(self):
        current = api.user.get_current().id
        roles = api.user.get_roles()
        if 'Manager' in roles or 'ALL' in self.context.ownerList:
            return True
        elif 'AE' in self.context.ownerList and 'Reader' in api.user.get_roles():
            return True
        elif 'PLANNER' in self.context.ownerList and 'Editor' in api.user.get_roles():
            return True
        else:
            if self.context.ownerList is None:
                return False
            else:
                ownerList = self.context.ownerList.split('\n')
                for tmpId in ownerList:
                    if current == tmpId.strip():
                        return True
                    else:
                        continue
                return False

    def getOrder(self):
        id = self.context.id
        execStr = "SELECT * FROM dfp_order WHERE ADVERTISER_ID = '%s'" % id 
        return self.execSql(execStr)

    def getLineItem(self, order_id):
        execStr = "SELECT * FROM dfp_line_item WHERE ORDER_ID = '{}'".format(order_id)
        return self.execSql(execStr)

 
        else:
            execStr = """UPDATE dfp_line_item SET {} = {} WHERE 
                LINE_ITEM_ID = '{}' """.format(est_name, value, update_id)

        self.execSql(execStr)
        return value


class UpdateDateData(ManaBasic):
    def __call__(self):
        update_name = self.request.form.get('update_name')
        line_item_id = self.request.form.get('line_item_id')
        value = self.request.form.get('value')
        date = self.request.form.get('date')
        execStr = """UPDATE dfp_ad_server SET {} = {} WHERE LINE_ITEM_ID = '{}' AND 
        date = '{}' """.format(update_name, value, line_item_id, date)
        self.execSql(execStr)
        return value


class UpdateStatus(ManaBasic):
    def __call__(self):
        date = self.request.get('date')
        line_item_id = self.request.get('line_item_id')
        execStr = """UPDATE dfp_ad_server SET status = 'disabled' WHERE date ='{}' AND 
            LINE_ITEM_ID = '{}'""".format(date, line_item_id)
        self.execSql(execStr)


class ManaCustomList(ManaBasic):
    template = ViewPageTemplateFile('template/mana_custom_list.pt')
    def getCustomList(self):
        current = api.user.get_current().getUserName()
        brains = api.content.find(Type='Custom', sort_on='created', sort_order='reverse')
        result = []
        for brain in brains:
            item = brain.getObject()
            item_ownerList = item.ownerList
            if item_ownerList != None:
                ownerList = item_ownerList.split('\n')
                appended = False
                if 'ALL' in ownerList:
                    result.append({
                        'title': item.title,
                        'url':brain.getURL()
                    })
                    appended = True
                elif 'AE' in ownerList:
                    if 'Reader' in api.user.get_roles():
                        result.append({
                            'title': item.title,
                            'url':brain.getURL()
                        })
                        appended = True
                elif 'PLANNER' in ownerList:
                    if 'Editor' in api.user.get_roles():
                        result.append({
                            'title': item.title,
                            'url':brain.getURL()
                        })
                        appended = True
#                import pdb; pdb.set_trace()
                if not appended:
                    for owner in ownerList:
                        if current == owner.strip():
                            result.append({
                                'title': item.title,
                                'url':brain.getURL()
                            })
        return result

    def __call__(self):
        if self.isAnonymous():
            return
        return self.template()


class CustomReport(ManaBasic):
    template = ViewPageTemplateFile('template/custom_report.pt')
    def checkUser(self):
        current = api.user.get_current().id
        roles = api.user.get_roles()
        if 'Manager' in roles or 'ALL' in self.context.ownerList:
            return True
        elif 'AE' in self.context.ownerList and 'Reader' in api.user.get_roles():
            return True
        elif 'PLANNER' in self.context.ownerList and 'Editor' in api.user.get_roles():
            return True
        else:
            if self.context.ownerList is None:
                return False
            else:
                ownerList = self.context.ownerList.split('\n')
                for tmpId in ownerList:
                    if current == tmpId.strip():
                        return True
                    else:
                        continue
                return False

    def getOrder(self):
        id = self.context.id
        execStr = "SELECT * FROM dfp_order WHERE ADVERTISER_ID = '%s'" % id 
        return self.execSql(execStr)

    def getLineItem(self, order_id):
        execStr = "SELECT * FROM dfp_line_item WHERE ORDER_ID = '{}'".format(order_id)
        return self.execSql(execStr)

 